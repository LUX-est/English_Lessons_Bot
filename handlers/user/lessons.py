from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db import get_db
from database.models import LessonSlot
from sqlalchemy import select

router = Router()

@router.message(F.text == "üìÜ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫")
async def show_slots(message: Message):
    async with get_db() as session:
        result = await session.execute(select(LessonSlot).where(LessonSlot.booked_by == None))
        slots = result.scalars().all()

    if not slots:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        return

    buttons = [
        [InlineKeyboardButton(text=slot.datetime_str, callback_data=f"book_{slot.id}")]
        for slot in slots
    ]

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ä–æ–∫–∞:", reply_markup=kb)

@router.callback_query()
async def process_booking(callback: CallbackQuery):
    if not callback.data or not callback.data.startswith("book_"):
        return  

    slot_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    async with get_db() as session:
        result = await session.execute(select(LessonSlot).where(LessonSlot.id == slot_id))
        slot = result.scalars().first()
        if not slot:
            await callback.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
            return
        if slot.booked_by is not None:
            await callback.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.", show_alert=True)
            return

        slot.booked_by = user_id
        await session.commit()

    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Ä–æ–∫!", show_alert=True)
    await callback.message.edit_text(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Ä–æ–∫: {slot.datetime_str}")
